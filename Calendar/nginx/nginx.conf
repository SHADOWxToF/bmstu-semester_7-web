
#user  nobody;
worker_processes  4;

error_log  logs/error.log;
error_log  logs/error.log  notice;
error_log  logs/error.log  info;


#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}



http {
    log_format upstreamlog '$server_name to: $upstream_addr {$request} '
   'upstream_response_time $upstream_response_time'
   ' request_time $request_time';
    upstream balance {
        server webserver weight=2;
        server webserver-1;
        server webserver-2;
    }

    upstream defaultserver {
        server webserver;
    }

    map $request_method $upstream_location { # создадим переменную, которая будет содержать бекенд, на который надо пойти (upstream_location)
        GET     balance;
        default "defaultserver";
    }

    proxy_cache_methods GET;
    # число запросов, после которого ответ будет закэширован.
    proxy_cache_min_uses 1;
    # время кэширования для разных кодов ответа.
    proxy_cache_valid 200 302 10m;
    proxy_cache_valid 404 1m;

    source_charset utf-8;
    charset utf-8;
    override_charset on;

    # имя сервера
    server_tokens off;
    add_header Server "my-webserver" always;

    # if ($request_method = GET) {

    # }

    server {
        listen 80;
        access_log logs/access.log upstreamlog;
        gzip on;

        gzip_types *;

        root static;

        location /api/v1/ {
            proxy_pass http://$upstream_location/swagger/;
        }

        location /api/ {
            proxy_pass http://$upstream_location$request_uri;
        }

        location /api/v1/api {
            rewrite ^/api/v1/(.*)$ /$1 break;
            proxy_pass http://$upstream_location;
        }

        location /mirror1/api/v1/ {
            proxy_set_header X-Base-Path mirror1;
            proxy_pass http://webserver-mirror/swagger/;
        }

        location /mirror1/api/ {
            proxy_set_header X-Base-Path mirror1;
            rewrite ^/mirror1/(.*)$ /$1 break;
            proxy_pass http://webserver-mirror;
        }

        location /nginx/ {
            root html;
        }

        location / {
        }

        location /test/ {
            proxy_pass http://localhost/;
        }

        location /status {
            stub_status;
        }

        location /documentation {
            index readme.md;
        }

        location /admin {
        proxy_set_header X-Script-Name /admin;
        proxy_set_header Host $host;
        proxy_pass http://pgadmin/;
        proxy_redirect off;
    }
        # location /static {
        #     proxy_pass http://pgadmin/login$request_uri;
        # }


        # #access_log  logs/host.access.log  main;

        # location / {
        #     root   html;
        #     index  index.html index.htm;
        # }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        # error_page   500 502 503 504  /50x.html;
        # location = /50x.html {
        #     root   html;
        # }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
